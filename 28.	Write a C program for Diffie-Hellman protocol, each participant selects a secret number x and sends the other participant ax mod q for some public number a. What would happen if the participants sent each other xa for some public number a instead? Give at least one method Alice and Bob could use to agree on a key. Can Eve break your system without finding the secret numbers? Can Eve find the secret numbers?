#include <stdio.h>
#include <math.h>

// Function to calculate (base^exponent) % modulus
int mod_pow(int base, int exponent, int modulus) {
    int result = 1;
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = (result * base) % modulus;
        }
        base = (base * base) % modulus;
        exponent /= 2;
    }
    return result;
}

int main() {
    int q = 23; // Prime modulus
    int a = 5;  // Primitive root
    int x_a, x_b; // Secret numbers chosen by Alice and Bob
    int A, B;    // Values exchanged between Alice and Bob

    // Alice chooses a secret number x_a
    x_a = 6; // Replace with your secret number

    // Bob chooses a secret number x_b
    x_b = 15; // Replace with your secret number

    // Calculate A = a^x_a % q and send it to Bob
    A = mod_pow(a, x_a, q);

    // Calculate B = a^x_b % q and send it to Alice
    B = mod_pow(a, x_b, q);

    // Both Alice and Bob calculate the shared secret key using B^x_a % q
    int shared_secret_A = mod_pow(B, x_a, q);
    int shared_secret_B = mod_pow(A, x_b, q);

    printf("Shared Secret Key (Alice): %d\n", shared_secret_A);
    printf("Shared Secret Key (Bob): %d\n", shared_secret_B);

    return 0;
}
