#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define NUM_LETTERS 26
#define NUM_TOP_PLAINTEXTS 10

// Define expected frequency distribution of letters in English language
const double english_freq[NUM_LETTERS] = {
    0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015,
    0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749,
    0.07507, 0.01929, 0.00095, 0.05987, 0.06327, 0.09056, 0.02758,
    0.00978, 0.02361, 0.00150, 0.01974, 0.00074
};

// Function to decipher text with an additive shift
void decryptAdditiveCipher(char *ciphertext, int shift, char *plaintext) {
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            char base = islower(ciphertext[i]) ? 'a' : 'A';
            plaintext[i] = (ciphertext[i] - base - shift + NUM_LETTERS) % NUM_LETTERS + base;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Function to calculate the sum of squared differences between observed and expected frequencies
double calculateFrequencyDifference(char *text, const double *expected_freq) {
    double freq_diff = 0.0;
    int total_letters = 0;
    int letter_count[NUM_LETTERS] = {0};

    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            total_letters++;
            letter_count[toupper(text[i]) - 'A']++;
        }
    }

    for (int i = 0; i < NUM_LETTERS; i++) {
        double observed_freq = (double)letter_count[i] / total_letters;
        freq_diff += (observed_freq - expected_freq[i]) * (observed_freq - expected_freq[i]);
    }

    return freq_diff;
}

int main() {
    char ciphertext[1000]; // Replace with your ciphertext
    char plaintext[1000];
    int num_top_plaintexts = NUM_TOP_PLAINTEXTS;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove newline character

    printf("\nDecryption Results (Top %d possible plaintexts):\n", num_top_plaintexts);

    // Try all possible shifts and calculate frequency differences
    for (int shift = 0; shift < NUM_LETTERS; shift++) {
        decryptAdditiveCipher(ciphertext, shift, plaintext);
        double freq_diff = calculateFrequencyDifference(plaintext, english_freq);
        printf("Shift %2d: %s (Frequency Difference: %.4lf)\n", shift, plaintext, freq_diff);
    }

    return 0;
}
